{
  "version": 3,
  "sources": ["../../@azure/msal-browser/src/operatingcontext/BaseOperatingContext.ts", "../../@azure/msal-browser/src/naa/BridgeProxy.ts", "../../@azure/msal-browser/src/operatingcontext/TeamsAppOperatingContext.ts", "../../@azure/msal-browser/src/operatingcontext/StandardOperatingContext.ts", "../../@azure/msal-browser/src/controllers/ControllerFactory.ts", "../../@azure/msal-browser/src/app/PublicClientApplication.ts", "../../@azure/msal-browser/src/controllers/UnknownOperatingContextController.ts", "../../@azure/msal-browser/src/operatingcontext/UnknownOperatingContext.ts", "../../@azure/msal-browser/src/app/PublicClientNext.ts", "../../@azure/msal-browser/src/app/IPublicClientApplication.ts", "../../@azure/msal-browser/src/event/EventMessage.ts", "../../@azure/msal-browser/src/crypto/SignedHttpRequest.ts", "../../@azure/msal-browser/src/telemetry/BrowserPerformanceClient.ts"],
  "sourcesContent": ["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Logger, LogLevel } from \"@azure/msal-common\";\r\nimport {\r\n    BrowserConfiguration,\r\n    buildConfiguration,\r\n    Configuration,\r\n} from \"../config/Configuration\";\r\nimport { version, name } from \"../packageMetadata\";\r\nimport {\r\n    BrowserCacheLocation,\r\n    LOG_LEVEL_CACHE_KEY,\r\n    LOG_PII_CACHE_KEY,\r\n} from \"../utils/BrowserConstants\";\r\n\r\n/**\r\n * Base class for operating context\r\n * Operating contexts are contexts in which MSAL.js is being run\r\n * More than one operating context may be available at a time\r\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\r\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\r\n */\r\nexport abstract class BaseOperatingContext {\r\n    protected logger: Logger;\r\n    protected config: BrowserConfiguration;\r\n    protected available: boolean;\r\n    protected browserEnvironment: boolean;\r\n\r\n    protected static loggerCallback(level: LogLevel, message: string): void {\r\n        switch (level) {\r\n            case LogLevel.Error:\r\n                // eslint-disable-next-line no-console\r\n                console.error(message);\r\n                return;\r\n            case LogLevel.Info:\r\n                // eslint-disable-next-line no-console\r\n                console.info(message);\r\n                return;\r\n            case LogLevel.Verbose:\r\n                // eslint-disable-next-line no-console\r\n                console.debug(message);\r\n                return;\r\n            case LogLevel.Warning:\r\n                // eslint-disable-next-line no-console\r\n                console.warn(message);\r\n                return;\r\n            default:\r\n                // eslint-disable-next-line no-console\r\n                console.log(message);\r\n                return;\r\n        }\r\n    }\r\n\r\n    constructor(config: Configuration) {\r\n        /*\r\n         * If loaded in an environment where window is not available,\r\n         * set internal flag to false so that further requests fail.\r\n         * This is to support server-side rendering environments.\r\n         */\r\n        this.browserEnvironment = typeof window !== \"undefined\";\r\n        this.config = buildConfiguration(config, this.browserEnvironment);\r\n\r\n        let sessionStorage: Storage | undefined;\r\n        try {\r\n            sessionStorage = window[BrowserCacheLocation.SessionStorage];\r\n            // Mute errors if it's a non-browser environment or cookies are blocked.\r\n        } catch (e) {}\r\n\r\n        const logLevelKey = sessionStorage?.getItem(LOG_LEVEL_CACHE_KEY);\r\n        const piiLoggingKey = sessionStorage\r\n            ?.getItem(LOG_PII_CACHE_KEY)\r\n            ?.toLowerCase();\r\n\r\n        const piiLoggingEnabled =\r\n            piiLoggingKey === \"true\"\r\n                ? true\r\n                : piiLoggingKey === \"false\"\r\n                ? false\r\n                : undefined;\r\n        const loggerOptions = { ...this.config.system.loggerOptions };\r\n\r\n        const logLevel =\r\n            logLevelKey && Object.keys(LogLevel).includes(logLevelKey)\r\n                ? LogLevel[logLevelKey]\r\n                : undefined;\r\n        if (logLevel) {\r\n            loggerOptions.loggerCallback = BaseOperatingContext.loggerCallback;\r\n            loggerOptions.logLevel = logLevel;\r\n        }\r\n        if (piiLoggingEnabled !== undefined) {\r\n            loggerOptions.piiLoggingEnabled = piiLoggingEnabled;\r\n        }\r\n\r\n        this.logger = new Logger(loggerOptions, name, version);\r\n        this.available = false;\r\n    }\r\n\r\n    /**\r\n     * returns the name of the module containing the API controller associated with this operating context\r\n     */\r\n    abstract getModuleName(): string;\r\n\r\n    /**\r\n     * returns the string identifier of this operating context\r\n     */\r\n    abstract getId(): string;\r\n\r\n    /**\r\n     * returns a boolean indicating whether this operating context is present\r\n     */\r\n    abstract initialize(): Promise<boolean>;\r\n\r\n    /**\r\n     * Return the MSAL config\r\n     * @returns BrowserConfiguration\r\n     */\r\n    getConfig(): BrowserConfiguration {\r\n        return this.config;\r\n    }\r\n\r\n    /**\r\n     * Returns the MSAL Logger\r\n     * @returns Logger\r\n     */\r\n    getLogger(): Logger {\r\n        return this.logger;\r\n    }\r\n\r\n    isAvailable(): boolean {\r\n        return this.available;\r\n    }\r\n\r\n    isBrowserEnvironment(): boolean {\r\n        return this.browserEnvironment;\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccountInfo } from \"./AccountInfo\";\r\nimport { AuthBridge, AuthBridgeResponse } from \"./AuthBridge\";\r\nimport { AuthResult } from \"./AuthResult\";\r\nimport { BridgeCapabilities } from \"./BridgeCapabilities\";\r\nimport { BridgeError } from \"./BridgeError\";\r\nimport { BridgeRequest } from \"./BridgeRequest\";\r\nimport { BridgeRequestEnvelope, BridgeMethods } from \"./BridgeRequestEnvelope\";\r\nimport { BridgeResponseEnvelope } from \"./BridgeResponseEnvelope\";\r\nimport { BridgeStatusCode } from \"./BridgeStatusCode\";\r\nimport { IBridgeProxy } from \"./IBridgeProxy\";\r\nimport { InitContext } from \"./InitContext\";\r\nimport { TokenRequest } from \"./TokenRequest\";\r\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        nestedAppAuthBridge: AuthBridge;\r\n    }\r\n}\r\n\r\n/**\r\n * BridgeProxy\r\n * Provides a proxy for accessing a bridge to a host app and/or\r\n * platform broker\r\n */\r\nexport class BridgeProxy implements IBridgeProxy {\r\n    static bridgeRequests: BridgeRequest[] = [];\r\n    sdkName: string;\r\n    sdkVersion: string;\r\n    capabilities?: BridgeCapabilities;\r\n\r\n    /**\r\n     * initializeNestedAppAuthBridge - Initializes the bridge to the host app\r\n     * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error\r\n     * @remarks This method will be called by the create factory method\r\n     * @remarks If the bridge is not available, this method will throw an error\r\n     */\r\n    protected static async initializeNestedAppAuthBridge(): Promise<InitContext> {\r\n        if (window === undefined) {\r\n            throw new Error(\"window is undefined\");\r\n        }\r\n        if (window.nestedAppAuthBridge === undefined) {\r\n            throw new Error(\"window.nestedAppAuthBridge is undefined\");\r\n        }\r\n\r\n        try {\r\n            window.nestedAppAuthBridge.addEventListener(\r\n                \"message\",\r\n                (response: AuthBridgeResponse) => {\r\n                    const responsePayload =\r\n                        typeof response === \"string\" ? response : response.data;\r\n                    const responseEnvelope: BridgeResponseEnvelope =\r\n                        JSON.parse(responsePayload);\r\n                    const request = BridgeProxy.bridgeRequests.find(\r\n                        (element) =>\r\n                            element.requestId === responseEnvelope.requestId\r\n                    );\r\n                    if (request !== undefined) {\r\n                        BridgeProxy.bridgeRequests.splice(\r\n                            BridgeProxy.bridgeRequests.indexOf(request),\r\n                            1\r\n                        );\r\n                        if (responseEnvelope.success) {\r\n                            request.resolve(responseEnvelope);\r\n                        } else {\r\n                            request.reject(responseEnvelope.error);\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n\r\n            const bridgeResponse = await new Promise<BridgeResponseEnvelope>(\r\n                (resolve, reject) => {\r\n                    const message: BridgeRequestEnvelope = {\r\n                        messageType: \"NestedAppAuthRequest\",\r\n                        method: \"GetInitContext\",\r\n                        requestId: BrowserCrypto.createNewGuid(),\r\n                    };\r\n                    const request: BridgeRequest = {\r\n                        requestId: message.requestId,\r\n                        method: message.method,\r\n                        resolve: resolve,\r\n                        reject: reject,\r\n                    };\r\n                    BridgeProxy.bridgeRequests.push(request);\r\n                    window.nestedAppAuthBridge.postMessage(\r\n                        JSON.stringify(message)\r\n                    );\r\n                }\r\n            );\r\n\r\n            return BridgeProxy.validateBridgeResultOrThrow(\r\n                bridgeResponse.initContext\r\n            );\r\n        } catch (error) {\r\n            window.console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * getTokenInteractive - Attempts to get a token interactively from the bridge\r\n     * @param request A token request\r\n     * @returns a promise that resolves to an auth result or rejects with a BridgeError\r\n     */\r\n    public getTokenInteractive(request: TokenRequest): Promise<AuthResult> {\r\n        return this.getToken(\"GetTokenPopup\", request);\r\n    }\r\n\r\n    /**\r\n     * getTokenSilent Attempts to get a token silently from the bridge\r\n     * @param request A token request\r\n     * @returns a promise that resolves to an auth result or rejects with a BridgeError\r\n     */\r\n    public getTokenSilent(request: TokenRequest): Promise<AuthResult> {\r\n        return this.getToken(\"GetToken\", request);\r\n    }\r\n\r\n    private async getToken(\r\n        requestType: BridgeMethods,\r\n        request: TokenRequest\r\n    ): Promise<AuthResult> {\r\n        const result = await this.sendRequest(requestType, {\r\n            tokenParams: request,\r\n        });\r\n        return {\r\n            token: BridgeProxy.validateBridgeResultOrThrow(result.token),\r\n            account: BridgeProxy.validateBridgeResultOrThrow(result.account),\r\n        };\r\n    }\r\n\r\n    public async getActiveAccount(): Promise<AccountInfo> {\r\n        const result = await this.sendRequest(\"GetActiveAccount\");\r\n        return BridgeProxy.validateBridgeResultOrThrow(result.account);\r\n    }\r\n\r\n    public getHostCapabilities(): BridgeCapabilities | null {\r\n        return this.capabilities ?? null;\r\n    }\r\n\r\n    /**\r\n     * A method used to send a request to the bridge\r\n     * @param request A token request\r\n     * @returns a promise that resolves to a response of provided type or rejects with a BridgeError\r\n     */\r\n    private sendRequest(\r\n        method: BridgeMethods,\r\n        requestParams?: Partial<BridgeRequestEnvelope>\r\n    ): Promise<BridgeResponseEnvelope> {\r\n        const message: BridgeRequestEnvelope = {\r\n            messageType: \"NestedAppAuthRequest\",\r\n            method: method,\r\n            requestId: BrowserCrypto.createNewGuid(),\r\n            ...requestParams,\r\n        };\r\n\r\n        const promise = new Promise<BridgeResponseEnvelope>(\r\n            (resolve, reject) => {\r\n                const request: BridgeRequest = {\r\n                    requestId: message.requestId,\r\n                    method: message.method,\r\n                    resolve: resolve,\r\n                    reject: reject,\r\n                };\r\n                BridgeProxy.bridgeRequests.push(request);\r\n                window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\r\n            }\r\n        );\r\n\r\n        return promise;\r\n    }\r\n\r\n    private static validateBridgeResultOrThrow<T>(input: T | undefined): T {\r\n        if (input === undefined) {\r\n            const bridgeError: BridgeError = {\r\n                status: BridgeStatusCode.NestedAppAuthUnavailable,\r\n            };\r\n            throw bridgeError;\r\n        }\r\n        return input;\r\n    }\r\n\r\n    /**\r\n     * Private constructor for BridgeProxy\r\n     * @param sdkName The name of the SDK being used to make requests on behalf of the app\r\n     * @param sdkVersion The version of the SDK being used to make requests on behalf of the app\r\n     * @param capabilities The capabilities of the bridge / SDK / platform broker\r\n     */\r\n    private constructor(\r\n        sdkName: string,\r\n        sdkVersion: string,\r\n        capabilities?: BridgeCapabilities\r\n    ) {\r\n        this.sdkName = sdkName;\r\n        this.sdkVersion = sdkVersion;\r\n        this.capabilities = capabilities;\r\n    }\r\n\r\n    /**\r\n     * Factory method for creating an implementation of IBridgeProxy\r\n     * @returns A promise that resolves to a BridgeProxy implementation\r\n     */\r\n    public static async create(): Promise<IBridgeProxy> {\r\n        const response = await BridgeProxy.initializeNestedAppAuthBridge();\r\n        return new BridgeProxy(\r\n            response.sdkName,\r\n            response.sdkVersion,\r\n            response.capabilities\r\n        );\r\n    }\r\n}\r\n\r\nexport default BridgeProxy;\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\r\nimport { IBridgeProxy } from \"../naa/IBridgeProxy\";\r\nimport { BridgeProxy } from \"../naa/BridgeProxy\";\r\nimport { AccountInfo } from \"../naa/AccountInfo\";\r\n\r\nexport class TeamsAppOperatingContext extends BaseOperatingContext {\r\n    protected bridgeProxy: IBridgeProxy | undefined = undefined;\r\n    protected activeAccount: AccountInfo | undefined = undefined;\r\n\r\n    /*\r\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n     * containing the implementation for this operating context\r\n     */\r\n    static readonly MODULE_NAME: string = \"\";\r\n\r\n    /**\r\n     * Unique identifier for the operating context\r\n     */\r\n    static readonly ID: string = \"TeamsAppOperatingContext\";\r\n\r\n    /**\r\n     * Return the module name.  Intended for use with import() to enable dynamic import\r\n     * of the implementation associated with this operating context\r\n     * @returns\r\n     */\r\n    getModuleName(): string {\r\n        return TeamsAppOperatingContext.MODULE_NAME;\r\n    }\r\n    /**\r\n     * Returns the unique identifier for this operating context\r\n     * @returns string\r\n     */\r\n    getId(): string {\r\n        return TeamsAppOperatingContext.ID;\r\n    }\r\n\r\n    getBridgeProxy(): IBridgeProxy | undefined {\r\n        return this.bridgeProxy;\r\n    }\r\n\r\n    getActiveAccount(): AccountInfo | undefined {\r\n        return this.activeAccount;\r\n    }\r\n\r\n    setActiveAccount(account: AccountInfo): void {\r\n        this.activeAccount = account;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the operating context is available.\r\n     * Confirms that the code is running a browser rather.  This is required.\r\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n     */\r\n    async initialize(): Promise<boolean> {\r\n        /*\r\n         * TODO: Add implementation to check for presence of inject Nested App Auth Bridge JavaScript interface\r\n         *\r\n         */\r\n\r\n        if (!this.getConfig().auth.supportsNestedAppAuth) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            if (typeof window !== \"undefined\") {\r\n                const bridgeProxy: IBridgeProxy = await BridgeProxy.create();\r\n                /*\r\n                 * Because we want single sign on we need to attempt to\r\n                 * grab the active account as part of initialization\r\n                 * this.activeAccount = await bridgeProxy.getActiveAccount();\r\n                 */\r\n                try {\r\n                    if (bridgeProxy.getHostCapabilities()?.queryAccount) {\r\n                        this.activeAccount =\r\n                            await bridgeProxy.getActiveAccount();\r\n                    }\r\n                } catch {\r\n                    // Ignore errors\r\n                }\r\n                this.bridgeProxy = bridgeProxy;\r\n                this.available = bridgeProxy !== undefined;\r\n            }\r\n        } catch (ex) {\r\n            this.logger.infoPii(\r\n                `Could not initialize Nested App Auth bridge (${ex})`\r\n            );\r\n        }\r\n\r\n        this.logger.info(`Nested App Auth Bridge available: ${this.available}`);\r\n        return this.available;\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\r\n\r\nexport class StandardOperatingContext extends BaseOperatingContext {\r\n    /*\r\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n     * containing the implementation for this operating context\r\n     */\r\n    static readonly MODULE_NAME: string = \"\";\r\n\r\n    /**\r\n     * Unique identifier for the operating context\r\n     */\r\n    static readonly ID: string = \"StandardOperatingContext\";\r\n\r\n    /**\r\n     * Return the module name.  Intended for use with import() to enable dynamic import\r\n     * of the implementation associated with this operating context\r\n     * @returns\r\n     */\r\n    getModuleName(): string {\r\n        return StandardOperatingContext.MODULE_NAME;\r\n    }\r\n    /**\r\n     * Returns the unique identifier for this operating context\r\n     * @returns string\r\n     */\r\n    getId(): string {\r\n        return StandardOperatingContext.ID;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the operating context is available.\r\n     * Confirms that the code is running a browser rather.  This is required.\r\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n     */\r\n    async initialize(): Promise<boolean> {\r\n        this.available = typeof window !== \"undefined\";\r\n        return this.available;\r\n        /*\r\n         * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser\r\n         * We can move the current contents of the initialize method to here and verify that the WAM extension is available\r\n         */\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { TeamsAppOperatingContext } from \"../operatingcontext/TeamsAppOperatingContext\";\r\nimport { StandardOperatingContext } from \"../operatingcontext/StandardOperatingContext\";\r\nimport { IController } from \"./IController\";\r\nimport { Configuration } from \"../config/Configuration\";\r\n\r\nexport async function createV3Controller(\r\n    config: Configuration\r\n): Promise<IController> {\r\n    const standard = new StandardOperatingContext(config);\r\n\r\n    await standard.initialize();\r\n\r\n    const controller = await import(\"./StandardController\");\r\n    return controller.StandardController.createController(standard);\r\n}\r\n\r\nexport async function createController(\r\n    config: Configuration\r\n): Promise<IController | null> {\r\n    const standard = new StandardOperatingContext(config);\r\n    const teamsApp = new TeamsAppOperatingContext(config);\r\n\r\n    const operatingContexts = [standard.initialize(), teamsApp.initialize()];\r\n\r\n    await Promise.all(operatingContexts);\r\n\r\n    if (teamsApp.isAvailable()) {\r\n        const controller = await import(\"./NestedAppAuthController\");\r\n        return controller.NestedAppAuthController.createController(teamsApp);\r\n    } else if (standard.isAvailable()) {\r\n        const controller = await import(\"./StandardController\");\r\n        return controller.StandardController.createController(standard);\r\n    } else {\r\n        // Since neither of the actual operating contexts are available keep the UnknownOperatingContextController\r\n        return null;\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ITokenCache } from \"../cache/ITokenCache\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { WrapperSKU } from \"../utils/BrowserConstants\";\r\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\r\nimport { IController } from \"../controllers/IController\";\r\nimport {\r\n    PerformanceCallbackFunction,\r\n    AccountInfo,\r\n    AccountFilter,\r\n    Logger,\r\n} from \"@azure/msal-common\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\nimport * as ControllerFactory from \"../controllers/ControllerFactory\";\r\nimport { StandardController } from \"../controllers/StandardController\";\r\nimport { BrowserConfiguration, Configuration } from \"../config/Configuration\";\r\nimport { StandardOperatingContext } from \"../operatingcontext/StandardOperatingContext\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { EventCallbackFunction } from \"../event/EventMessage\";\r\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\r\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\r\n\r\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\r\nexport class PublicClientApplication implements IPublicClientApplication {\r\n    protected controller: IController;\r\n\r\n    public static async createPublicClientApplication(\r\n        configuration: Configuration\r\n    ): Promise<IPublicClientApplication> {\r\n        const controller = await ControllerFactory.createV3Controller(\r\n            configuration\r\n        );\r\n        const pca = new PublicClientApplication(configuration, controller);\r\n\r\n        return pca;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration Object for the MSAL PublicClientApplication instance\r\n     * @param IController Optional parameter to explictly set the controller. (Will be removed when we remove public constructor)\r\n     */\r\n    public constructor(configuration: Configuration, controller?: IController) {\r\n        if (controller) {\r\n            this.controller = controller;\r\n        } else {\r\n            const standardOperatingContext = new StandardOperatingContext(\r\n                configuration\r\n            );\r\n            this.controller = new StandardController(standardOperatingContext);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializer function to perform async startup tasks such as connecting to WAM extension\r\n     */\r\n    async initialize(): Promise<void> {\r\n        return this.controller.initialize();\r\n    }\r\n\r\n    /**\r\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    async acquireTokenPopup(\r\n        request: PopupRequest\r\n    ): Promise<AuthenticationResult> {\r\n        return this.controller.acquireTokenPopup(request);\r\n    }\r\n\r\n    /**\r\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\r\n     * the page, so any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\r\n        return this.controller.acquireTokenRedirect(request);\r\n    }\r\n\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthenticationResult} object\r\n     */\r\n    acquireTokenSilent(\r\n        silentRequest: SilentRequest\r\n    ): Promise<AuthenticationResult> {\r\n        return this.controller.acquireTokenSilent(silentRequest);\r\n    }\r\n\r\n    /**\r\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\r\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\r\n     * This API is not indended for normal authorization code acquisition and redemption.\r\n     *\r\n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\r\n     *\r\n     * @param request {@link AuthorizationCodeRequest}\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    acquireTokenByCode(\r\n        request: AuthorizationCodeRequest\r\n    ): Promise<AuthenticationResult> {\r\n        return this.controller.acquireTokenByCode(request);\r\n    }\r\n\r\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */\r\n    addEventCallback(callback: EventCallbackFunction): string | null {\r\n        return this.controller.addEventCallback(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */\r\n    removeEventCallback(callbackId: string): void {\r\n        return this.controller.removeEventCallback(callbackId);\r\n    }\r\n\r\n    /**\r\n     * Registers a callback to receive performance events.\r\n     *\r\n     * @param {PerformanceCallbackFunction} callback\r\n     * @returns {string}\r\n     */\r\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\r\n        return this.controller.addPerformanceCallback(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes a callback registered with addPerformanceCallback.\r\n     *\r\n     * @param {string} callbackId\r\n     * @returns {boolean}\r\n     */\r\n    removePerformanceCallback(callbackId: string): boolean {\r\n        return this.controller.removePerformanceCallback(callbackId);\r\n    }\r\n\r\n    /**\r\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    enableAccountStorageEvents(): void {\r\n        this.controller.enableAccountStorageEvents();\r\n    }\r\n\r\n    /**\r\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    disableAccountStorageEvents(): void {\r\n        this.controller.disableAccountStorageEvents();\r\n    }\r\n\r\n    /**\r\n     * Returns the first account found in the cache that matches the account filter passed in.\r\n     * @param accountFilter\r\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n     */\r\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\r\n        return this.controller.getAccount(accountFilter);\r\n    }\r\n\r\n    /**\r\n     * Returns the signed in account matching homeAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param homeAccountId\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */\r\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\r\n        return this.controller.getAccountByHomeId(homeAccountId);\r\n    }\r\n\r\n    /**\r\n     * Returns the signed in account matching localAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param localAccountId\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */\r\n    getAccountByLocalId(localId: string): AccountInfo | null {\r\n        return this.controller.getAccountByLocalId(localId);\r\n    }\r\n\r\n    /**\r\n     * Returns the signed in account matching username.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found.\r\n     * This API is provided for convenience but getAccountById should be used for best reliability\r\n     * @param userName\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */\r\n    getAccountByUsername(userName: string): AccountInfo | null {\r\n        return this.controller.getAccountByUsername(userName);\r\n    }\r\n\r\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */\r\n    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[] {\r\n        return this.controller.getAllAccounts(accountFilter);\r\n    }\r\n\r\n    /**\r\n     * Event handler function which allows users to fire events after the PublicClientApplication object\r\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\r\n     * auth flows.\r\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\r\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\r\n     */\r\n    handleRedirectPromise(\r\n        hash?: string | undefined\r\n    ): Promise<AuthenticationResult | null> {\r\n        return this.controller.handleRedirectPromise(hash);\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    loginPopup(\r\n        request?: PopupRequest | undefined\r\n    ): Promise<AuthenticationResult> {\r\n        return this.controller.loginPopup(request);\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\r\n        return this.controller.loginRedirect(request);\r\n    }\r\n\r\n    /**\r\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\r\n     * @param logoutRequest\r\n     * @deprecated\r\n     */\r\n    logout(logoutRequest?: EndSessionRequest): Promise<void> {\r\n        return this.controller.logout(logoutRequest);\r\n    }\r\n\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */\r\n    logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void> {\r\n        return this.controller.logoutRedirect(logoutRequest);\r\n    }\r\n\r\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */\r\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void> {\r\n        return this.controller.logoutPopup(logoutRequest);\r\n    }\r\n\r\n    /**\r\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\r\n     * - Any browser using a form of Intelligent Tracking Prevention\r\n     * - If there is not an established session with the service\r\n     *\r\n     * In these cases, the request must be done inside a popup or full frame redirect.\r\n     *\r\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\r\n     *\r\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\r\n     * you session on the server still exists.\r\n     * @param request {@link SsoSilentRequest}\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult> {\r\n        return this.controller.ssoSilent(request);\r\n    }\r\n\r\n    /**\r\n     * Gets the token cache for the application.\r\n     */\r\n    getTokenCache(): ITokenCache {\r\n        return this.controller.getTokenCache();\r\n    }\r\n\r\n    /**\r\n     * Returns the logger instance\r\n     */\r\n    getLogger(): Logger {\r\n        return this.controller.getLogger();\r\n    }\r\n\r\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger Logger instance\r\n     */\r\n    setLogger(logger: Logger): void {\r\n        this.controller.setLogger(logger);\r\n    }\r\n\r\n    /**\r\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n     * @param account\r\n     */\r\n    setActiveAccount(account: AccountInfo | null): void {\r\n        this.controller.setActiveAccount(account);\r\n    }\r\n\r\n    /**\r\n     * Gets the currently active account\r\n     */\r\n    getActiveAccount(): AccountInfo | null {\r\n        return this.controller.getActiveAccount();\r\n    }\r\n\r\n    /**\r\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\r\n     * @param sku\r\n     * @param version\r\n     */\r\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\r\n        return this.controller.initializeWrapperLibrary(sku, version);\r\n    }\r\n\r\n    /**\r\n     * Sets navigation client\r\n     * @param navigationClient\r\n     */\r\n    setNavigationClient(navigationClient: INavigationClient): void {\r\n        this.controller.setNavigationClient(navigationClient);\r\n    }\r\n\r\n    /**\r\n     * Returns the configuration object\r\n     * @internal\r\n     */\r\n    getConfiguration(): BrowserConfiguration {\r\n        return this.controller.getConfiguration();\r\n    }\r\n\r\n    /**\r\n     * Hydrates cache with the tokens and account in the AuthenticationResult object\r\n     * @param result\r\n     * @param request - The request object that was used to obtain the AuthenticationResult\r\n     * @returns\r\n     */\r\n    async hydrateCache(\r\n        result: AuthenticationResult,\r\n        request:\r\n            | SilentRequest\r\n            | SsoSilentRequest\r\n            | RedirectRequest\r\n            | PopupRequest\r\n    ): Promise<void> {\r\n        return this.controller.hydrateCache(result, request);\r\n    }\r\n\r\n    /**\r\n     * Clears tokens and account from the browser cache.\r\n     * @param logoutRequest\r\n     */\r\n    clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\r\n        return this.controller.clearCache(logoutRequest);\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    CommonAuthorizationUrlRequest,\r\n    CommonSilentFlowRequest,\r\n    PerformanceCallbackFunction,\r\n    AccountInfo,\r\n    Logger,\r\n    ICrypto,\r\n    IPerformanceClient,\r\n    DEFAULT_CRYPTO_IMPLEMENTATION,\r\n    AccountFilter,\r\n} from \"@azure/msal-common\";\r\nimport { ITokenCache } from \"../cache/ITokenCache\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport {\r\n    BrowserCacheManager,\r\n    DEFAULT_BROWSER_CACHE_MANAGER,\r\n} from \"../cache/BrowserCacheManager\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\r\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { ApiId, WrapperSKU } from \"../utils/BrowserConstants\";\r\nimport { IController } from \"./IController\";\r\nimport { UnknownOperatingContext } from \"../operatingcontext/UnknownOperatingContext\";\r\nimport { CryptoOps } from \"../crypto/CryptoOps\";\r\nimport {\r\n    blockAPICallsBeforeInitialize,\r\n    blockNonBrowserEnvironment,\r\n} from \"../utils/BrowserUtils\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { EventCallbackFunction } from \"../event/EventMessage\";\r\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\r\n\r\n/**\r\n * UnknownOperatingContextController class\r\n *\r\n * - Until initialize method is called, this controller is the default\r\n * - AFter initialize method is called, this controller will be swapped out for the appropriate controller\r\n * if the operating context can be determined; otherwise this controller will continued be used\r\n *\r\n * - Why do we have this?  We don't want to dynamically import (download) all of the code in StandardController if we don't need to.\r\n *\r\n * - Only includes implementation for getAccounts and handleRedirectPromise\r\n *   - All other methods are will throw initialization error (because either initialize method or the factory method were not used)\r\n *   - This controller is necessary for React Native wrapper, server side rendering and any other scenario where we don't have a DOM\r\n *\r\n */\r\nexport class UnknownOperatingContextController implements IController {\r\n    // OperatingContext\r\n    protected readonly operatingContext: UnknownOperatingContext;\r\n\r\n    // Logger\r\n    protected logger: Logger;\r\n\r\n    // Storage interface implementation\r\n    protected readonly browserStorage: BrowserCacheManager;\r\n\r\n    // Input configuration by developer/user\r\n    protected readonly config: BrowserConfiguration;\r\n\r\n    // Performance telemetry client\r\n    protected readonly performanceClient: IPerformanceClient;\r\n\r\n    // Crypto interface implementation\r\n    protected readonly browserCrypto: ICrypto;\r\n\r\n    // Flag to indicate if in browser environment\r\n    protected isBrowserEnvironment: boolean;\r\n\r\n    // Flag representing whether or not the initialize API has been called and completed\r\n    protected initialized: boolean = false;\r\n\r\n    protected readonly eventHandler: EventHandler;\r\n\r\n    constructor(operatingContext: UnknownOperatingContext) {\r\n        this.operatingContext = operatingContext;\r\n\r\n        this.isBrowserEnvironment =\r\n            this.operatingContext.isBrowserEnvironment();\r\n\r\n        this.config = operatingContext.getConfig();\r\n\r\n        this.logger = operatingContext.getLogger();\r\n\r\n        // Initialize performance client\r\n        this.performanceClient = this.config.telemetry.client;\r\n\r\n        // Initialize the crypto class.\r\n        this.browserCrypto = this.isBrowserEnvironment\r\n            ? new CryptoOps(this.logger, this.performanceClient)\r\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\r\n\r\n        // Initialize the browser storage class.\r\n        this.browserStorage = this.isBrowserEnvironment\r\n            ? new BrowserCacheManager(\r\n                  this.config.auth.clientId,\r\n                  this.config.cache,\r\n                  this.browserCrypto,\r\n                  this.logger,\r\n                  undefined,\r\n                  this.performanceClient\r\n              )\r\n            : DEFAULT_BROWSER_CACHE_MANAGER(\r\n                  this.config.auth.clientId,\r\n                  this.logger\r\n              );\r\n\r\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\r\n    }\r\n    getBrowserStorage(): BrowserCacheManager {\r\n        return this.browserStorage;\r\n    }\r\n\r\n    getEventHandler(): EventHandler {\r\n        return this.eventHandler;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\r\n        return null;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\r\n        return null;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    getAccountByLocalId(localAccountId: string): AccountInfo | null {\r\n        return null;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    getAccountByUsername(username: string): AccountInfo | null {\r\n        return null;\r\n    }\r\n    getAllAccounts(): AccountInfo[] {\r\n        return [];\r\n    }\r\n    initialize(): Promise<void> {\r\n        this.initialized = true;\r\n        return Promise.resolve();\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Promise<AuthenticationResult>;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return Promise.resolve();\r\n    }\r\n    acquireTokenSilent(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        silentRequest: SilentRequest\r\n    ): Promise<AuthenticationResult> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Promise<AuthenticationResult>;\r\n    }\r\n    acquireTokenByCode(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        request: AuthorizationCodeRequest\r\n    ): Promise<AuthenticationResult> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Promise<AuthenticationResult>;\r\n    }\r\n    acquireTokenNative(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        request:\r\n            | PopupRequest\r\n            | SilentRequest\r\n            | Partial<\r\n                  Omit<\r\n                      CommonAuthorizationUrlRequest,\r\n                      | \"responseMode\"\r\n                      | \"codeChallenge\"\r\n                      | \"codeChallengeMethod\"\r\n                      | \"requestedClaimsHash\"\r\n                      | \"nativeBroker\"\r\n                  >\r\n              >,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        apiId: ApiId,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        accountId?: string | undefined\r\n    ): Promise<AuthenticationResult> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Promise<AuthenticationResult>;\r\n    }\r\n    acquireTokenByRefreshToken(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        commonRequest: CommonSilentFlowRequest,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        silentRequest: SilentRequest\r\n    ): Promise<AuthenticationResult> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Promise<AuthenticationResult>;\r\n    }\r\n    addEventCallback(callback: EventCallbackFunction): string | null {\r\n        return this.eventHandler.addEventCallback(callback);\r\n    }\r\n    removeEventCallback(callbackId: string): void {\r\n        this.eventHandler.removeEventCallback(callbackId);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return \"\";\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    removePerformanceCallback(callbackId: string): boolean {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return true;\r\n    }\r\n    enableAccountStorageEvents(): void {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n    }\r\n    disableAccountStorageEvents(): void {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n    }\r\n\r\n    handleRedirectPromise(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        hash?: string | undefined\r\n    ): Promise<AuthenticationResult | null> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        return Promise.resolve(null);\r\n    }\r\n    loginPopup(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        request?: PopupRequest | undefined\r\n    ): Promise<AuthenticationResult> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Promise<AuthenticationResult>;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Promise<void>;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    logout(logoutRequest?: EndSessionRequest | undefined): Promise<void> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Promise<void>;\r\n    }\r\n    logoutRedirect(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        logoutRequest?: EndSessionRequest | undefined\r\n    ): Promise<void> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Promise<void>;\r\n    }\r\n    logoutPopup(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        logoutRequest?: EndSessionPopupRequest | undefined\r\n    ): Promise<void> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Promise<void>;\r\n    }\r\n    ssoSilent(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        request: Partial<\r\n            Omit<\r\n                CommonAuthorizationUrlRequest,\r\n                | \"responseMode\"\r\n                | \"codeChallenge\"\r\n                | \"codeChallengeMethod\"\r\n                | \"requestedClaimsHash\"\r\n                | \"nativeBroker\"\r\n            >\r\n        >\r\n    ): Promise<AuthenticationResult> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Promise<AuthenticationResult>;\r\n    }\r\n    getTokenCache(): ITokenCache {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as ITokenCache;\r\n    }\r\n    getLogger(): Logger {\r\n        return this.logger;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    setLogger(logger: Logger): void {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    setActiveAccount(account: AccountInfo | null): void {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n    }\r\n    getActiveAccount(): AccountInfo | null {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return null;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\r\n        this.browserStorage.setWrapperMetadata(sku, version);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    setNavigationClient(navigationClient: INavigationClient): void {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n    }\r\n    getConfiguration(): BrowserConfiguration {\r\n        return this.config;\r\n    }\r\n    isBrowserEnv(): boolean {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return true;\r\n    }\r\n    getBrowserCrypto(): ICrypto {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as ICrypto;\r\n    }\r\n    getPerformanceClient(): IPerformanceClient {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as IPerformanceClient;\r\n    }\r\n    getRedirectResponse(): Map<string, Promise<AuthenticationResult | null>> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n        return {} as Map<string, Promise<AuthenticationResult | null>>;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    async hydrateCache(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        result: AuthenticationResult,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        request:\r\n            | SilentRequest\r\n            | SsoSilentRequest\r\n            | RedirectRequest\r\n            | PopupRequest\r\n    ): Promise<void> {\r\n        blockAPICallsBeforeInitialize(this.initialized);\r\n        blockNonBrowserEnvironment();\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\r\n\r\nexport class UnknownOperatingContext extends BaseOperatingContext {\r\n    /*\r\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n     * containing the implementation for this operating context\r\n     */\r\n    static readonly MODULE_NAME: string = \"\";\r\n\r\n    /**\r\n     * Unique identifier for the operating context\r\n     */\r\n    static readonly ID: string = \"UnknownOperatingContext\";\r\n\r\n    /**\r\n     * Return the module name.  Intended for use with import() to enable dynamic import\r\n     * of the implementation associated with this operating context\r\n     * @returns\r\n     */\r\n    getModuleName(): string {\r\n        return UnknownOperatingContext.MODULE_NAME;\r\n    }\r\n    /**\r\n     * Returns the unique identifier for this operating context\r\n     * @returns string\r\n     */\r\n    getId(): string {\r\n        return UnknownOperatingContext.ID;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the operating context is available.\r\n     * Confirms that the code is running a browser rather.  This is required.\r\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n     */\r\n    async initialize(): Promise<boolean> {\r\n        /**\r\n         * This operating context is in use when we have not checked for what the operating context is.\r\n         * The context is unknown until we check it.\r\n         */\r\n        return true;\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ITokenCache } from \"../cache/ITokenCache\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { WrapperSKU } from \"../utils/BrowserConstants\";\r\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\r\nimport { IController } from \"../controllers/IController\";\r\nimport {\r\n    PerformanceCallbackFunction,\r\n    AccountInfo,\r\n    AccountFilter,\r\n    Logger,\r\n} from \"@azure/msal-common\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\nimport * as ControllerFactory from \"../controllers/ControllerFactory\";\r\nimport { BrowserConfiguration, Configuration } from \"../config/Configuration\";\r\nimport { EventCallbackFunction } from \"../event/EventMessage\";\r\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { UnknownOperatingContextController } from \"../controllers/UnknownOperatingContextController\";\r\nimport { UnknownOperatingContext } from \"../operatingcontext/UnknownOperatingContext\";\r\n\r\n/**\r\n * PublicClientNext is an early look at the planned implementation of PublicClientApplication in the next major version of MSAL.js.\r\n * It contains support for multiple API implementations based on the runtime environment that it is running in.\r\n *\r\n * The goals of these changes are to provide a clean separation of behavior between different operating contexts (Nested App Auth, Platform Brokers, Plain old Browser, etc.)\r\n * while still providing a consistent API surface for developers.\r\n *\r\n */\r\nexport class PublicClientNext implements IPublicClientApplication {\r\n    /*\r\n     * Definite assignment assertion used below\r\n     * https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#definite-assignment-assertions\r\n     */\r\n    protected controller!: IController;\r\n    protected configuration: Configuration;\r\n\r\n    public static async createPublicClientApplication(\r\n        configuration: Configuration\r\n    ): Promise<IPublicClientApplication> {\r\n        const controller = await ControllerFactory.createController(\r\n            configuration\r\n        );\r\n        let pca;\r\n        if (controller !== null) {\r\n            pca = new PublicClientNext(configuration, controller);\r\n        } else {\r\n            pca = new PublicClientNext(configuration);\r\n        }\r\n        return pca;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientNext used to instantiate the PublicClientNext object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration Object for the MSAL PublicClientApplication instance\r\n     * @param IController Optional parameter to explictly set the controller. (Will be removed when we remove public constructor)\r\n     */\r\n    private constructor(\r\n        configuration: Configuration,\r\n        controller?: IController\r\n    ) {\r\n        this.configuration = configuration;\r\n        if (controller) {\r\n            this.controller = controller;\r\n        } else {\r\n            const operatingContext = new UnknownOperatingContext(configuration);\r\n            this.controller = new UnknownOperatingContextController(\r\n                operatingContext\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializer function to perform async startup tasks such as connecting to WAM extension\r\n     */\r\n    async initialize(): Promise<void> {\r\n        if (this.controller instanceof UnknownOperatingContextController) {\r\n            const result = await ControllerFactory.createController(\r\n                this.configuration\r\n            );\r\n            if (result !== null) {\r\n                this.controller = result;\r\n            }\r\n            return this.controller.initialize();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    async acquireTokenPopup(\r\n        request: PopupRequest\r\n    ): Promise<AuthenticationResult> {\r\n        return this.controller.acquireTokenPopup(request);\r\n    }\r\n\r\n    /**\r\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\r\n     * the page, so any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\r\n        return this.controller.acquireTokenRedirect(request);\r\n    }\r\n\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthenticationResult} object\r\n     */\r\n    acquireTokenSilent(\r\n        silentRequest: SilentRequest\r\n    ): Promise<AuthenticationResult> {\r\n        return this.controller.acquireTokenSilent(silentRequest);\r\n    }\r\n\r\n    /**\r\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\r\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\r\n     * This API is not indended for normal authorization code acquisition and redemption.\r\n     *\r\n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\r\n     *\r\n     * @param request {@link AuthorizationCodeRequest}\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    acquireTokenByCode(\r\n        request: AuthorizationCodeRequest\r\n    ): Promise<AuthenticationResult> {\r\n        return this.controller.acquireTokenByCode(request);\r\n    }\r\n\r\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */\r\n    addEventCallback(callback: EventCallbackFunction): string | null {\r\n        return this.controller.addEventCallback(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */\r\n    removeEventCallback(callbackId: string): void {\r\n        return this.controller.removeEventCallback(callbackId);\r\n    }\r\n\r\n    /**\r\n     * Registers a callback to receive performance events.\r\n     *\r\n     * @param {PerformanceCallbackFunction} callback\r\n     * @returns {string}\r\n     */\r\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\r\n        return this.controller.addPerformanceCallback(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes a callback registered with addPerformanceCallback.\r\n     *\r\n     * @param {string} callbackId\r\n     * @returns {boolean}\r\n     */\r\n    removePerformanceCallback(callbackId: string): boolean {\r\n        return this.controller.removePerformanceCallback(callbackId);\r\n    }\r\n\r\n    /**\r\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    enableAccountStorageEvents(): void {\r\n        this.controller.enableAccountStorageEvents();\r\n    }\r\n\r\n    /**\r\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    disableAccountStorageEvents(): void {\r\n        this.controller.disableAccountStorageEvents();\r\n    }\r\n\r\n    /**\r\n     * Returns the first account found in the cache that matches the account filter passed in.\r\n     * @param accountFilter\r\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n     */\r\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\r\n        return this.controller.getAccount(accountFilter);\r\n    }\r\n\r\n    /**\r\n     * Returns the signed in account matching homeAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param homeAccountId\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */\r\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\r\n        return this.controller.getAccountByHomeId(homeAccountId);\r\n    }\r\n\r\n    /**\r\n     * Returns the signed in account matching localAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param localAccountId\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */\r\n    getAccountByLocalId(localId: string): AccountInfo | null {\r\n        return this.controller.getAccountByLocalId(localId);\r\n    }\r\n\r\n    /**\r\n     * Returns the signed in account matching username.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found.\r\n     * This API is provided for convenience but getAccountById should be used for best reliability\r\n     * @param userName\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */\r\n    getAccountByUsername(userName: string): AccountInfo | null {\r\n        return this.controller.getAccountByUsername(userName);\r\n    }\r\n\r\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */\r\n    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[] {\r\n        return this.controller.getAllAccounts(accountFilter);\r\n    }\r\n\r\n    /**\r\n     * Event handler function which allows users to fire events after the PublicClientApplication object\r\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\r\n     * auth flows.\r\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\r\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\r\n     */\r\n    handleRedirectPromise(\r\n        hash?: string | undefined\r\n    ): Promise<AuthenticationResult | null> {\r\n        return this.controller.handleRedirectPromise(hash);\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    loginPopup(\r\n        request?: PopupRequest | undefined\r\n    ): Promise<AuthenticationResult> {\r\n        return this.controller.loginPopup(request);\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\r\n        return this.controller.loginRedirect(request);\r\n    }\r\n\r\n    /**\r\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\r\n     * @param logoutRequest\r\n     * @deprecated\r\n     */\r\n    logout(logoutRequest?: EndSessionRequest): Promise<void> {\r\n        return this.controller.logout(logoutRequest);\r\n    }\r\n\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */\r\n    logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void> {\r\n        return this.controller.logoutRedirect(logoutRequest);\r\n    }\r\n\r\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */\r\n    logoutPopup(logoutRequest?: EndSessionRequest): Promise<void> {\r\n        return this.controller.logoutPopup(logoutRequest);\r\n    }\r\n\r\n    /**\r\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\r\n     * - Any browser using a form of Intelligent Tracking Prevention\r\n     * - If there is not an established session with the service\r\n     *\r\n     * In these cases, the request must be done inside a popup or full frame redirect.\r\n     *\r\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\r\n     *\r\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\r\n     * you session on the server still exists.\r\n     * @param request {@link SsoSilentRequest}\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult> {\r\n        return this.controller.ssoSilent(request);\r\n    }\r\n\r\n    /**\r\n     * Gets the token cache for the application.\r\n     */\r\n    getTokenCache(): ITokenCache {\r\n        return this.controller.getTokenCache();\r\n    }\r\n\r\n    /**\r\n     * Returns the logger instance\r\n     */\r\n    getLogger(): Logger {\r\n        return this.controller.getLogger();\r\n    }\r\n\r\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger Logger instance\r\n     */\r\n    setLogger(logger: Logger): void {\r\n        this.controller.setLogger(logger);\r\n    }\r\n\r\n    /**\r\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n     * @param account\r\n     */\r\n    setActiveAccount(account: AccountInfo | null): void {\r\n        this.controller.setActiveAccount(account);\r\n    }\r\n\r\n    /**\r\n     * Gets the currently active account\r\n     */\r\n    getActiveAccount(): AccountInfo | null {\r\n        return this.controller.getActiveAccount();\r\n    }\r\n\r\n    /**\r\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\r\n     * @param sku\r\n     * @param version\r\n     */\r\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\r\n        return this.controller.initializeWrapperLibrary(sku, version);\r\n    }\r\n\r\n    /**\r\n     * Sets navigation client\r\n     * @param navigationClient\r\n     */\r\n    setNavigationClient(navigationClient: INavigationClient): void {\r\n        this.controller.setNavigationClient(navigationClient);\r\n    }\r\n\r\n    /**\r\n     * Returns the configuration object\r\n     * @internal\r\n     */\r\n    getConfiguration(): BrowserConfiguration {\r\n        return this.controller.getConfiguration();\r\n    }\r\n\r\n    /**\r\n     * Hydrates cache with the tokens and account in the AuthenticationResult object\r\n     * @param result\r\n     * @param request - The request object that was used to obtain the AuthenticationResult\r\n     * @returns\r\n     */\r\n    async hydrateCache(\r\n        result: AuthenticationResult,\r\n        request:\r\n            | SilentRequest\r\n            | SsoSilentRequest\r\n            | RedirectRequest\r\n            | PopupRequest\r\n    ): Promise<void> {\r\n        return this.controller.hydrateCache(result, request);\r\n    }\r\n\r\n    /**\r\n     * Clears tokens and account from the browser cache.\r\n     * @param logoutRequest\r\n     */\r\n    clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\r\n        return this.controller.clearCache(logoutRequest);\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    AccountFilter,\r\n    AccountInfo,\r\n    Logger,\r\n    PerformanceCallbackFunction,\r\n} from \"@azure/msal-common\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport {\r\n    BrowserConfigurationAuthErrorCodes,\r\n    createBrowserConfigurationAuthError,\r\n} from \"../error/BrowserConfigurationAuthError\";\r\nimport { WrapperSKU } from \"../utils/BrowserConstants\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\r\nimport { ITokenCache } from \"../cache/ITokenCache\";\r\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { EventCallbackFunction } from \"../event/EventMessage\";\r\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\r\n\r\nexport interface IPublicClientApplication {\r\n    initialize(): Promise<void>;\r\n    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult>;\r\n    acquireTokenRedirect(request: RedirectRequest): Promise<void>;\r\n    acquireTokenSilent(\r\n        silentRequest: SilentRequest\r\n    ): Promise<AuthenticationResult>;\r\n    acquireTokenByCode(\r\n        request: AuthorizationCodeRequest\r\n    ): Promise<AuthenticationResult>;\r\n    addEventCallback(callback: EventCallbackFunction): string | null;\r\n    removeEventCallback(callbackId: string): void;\r\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string;\r\n    removePerformanceCallback(callbackId: string): boolean;\r\n    enableAccountStorageEvents(): void;\r\n    disableAccountStorageEvents(): void;\r\n    getAccount(accountFilter: AccountFilter): AccountInfo | null;\r\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null;\r\n    getAccountByLocalId(localId: string): AccountInfo | null;\r\n    getAccountByUsername(userName: string): AccountInfo | null;\r\n    getAllAccounts(): AccountInfo[];\r\n    handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null>;\r\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult>;\r\n    loginRedirect(request?: RedirectRequest): Promise<void>;\r\n    logout(logoutRequest?: EndSessionRequest): Promise<void>;\r\n    logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void>;\r\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void>;\r\n    ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult>;\r\n    getTokenCache(): ITokenCache;\r\n    getLogger(): Logger;\r\n    setLogger(logger: Logger): void;\r\n    setActiveAccount(account: AccountInfo | null): void;\r\n    getActiveAccount(): AccountInfo | null;\r\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void;\r\n    setNavigationClient(navigationClient: INavigationClient): void;\r\n    /** @internal */\r\n    getConfiguration(): BrowserConfiguration;\r\n    hydrateCache(\r\n        result: AuthenticationResult,\r\n        request:\r\n            | SilentRequest\r\n            | SsoSilentRequest\r\n            | RedirectRequest\r\n            | PopupRequest\r\n    ): Promise<void>;\r\n    clearCache(logoutRequest?: ClearCacheRequest): Promise<void>;\r\n}\r\n\r\nexport const stubbedPublicClientApplication: IPublicClientApplication = {\r\n    initialize: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    acquireTokenPopup: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    acquireTokenRedirect: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    acquireTokenSilent: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    acquireTokenByCode: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    getAllAccounts: () => {\r\n        return [];\r\n    },\r\n    getAccount: () => {\r\n        return null;\r\n    },\r\n    getAccountByHomeId: () => {\r\n        return null;\r\n    },\r\n    getAccountByUsername: () => {\r\n        return null;\r\n    },\r\n    getAccountByLocalId: () => {\r\n        return null;\r\n    },\r\n    handleRedirectPromise: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    loginPopup: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    loginRedirect: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    logout: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    logoutRedirect: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    logoutPopup: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    ssoSilent: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    addEventCallback: () => {\r\n        return null;\r\n    },\r\n    removeEventCallback: () => {\r\n        return;\r\n    },\r\n    addPerformanceCallback: () => {\r\n        return \"\";\r\n    },\r\n    removePerformanceCallback: () => {\r\n        return false;\r\n    },\r\n    enableAccountStorageEvents: () => {\r\n        return;\r\n    },\r\n    disableAccountStorageEvents: () => {\r\n        return;\r\n    },\r\n    getTokenCache: () => {\r\n        throw createBrowserConfigurationAuthError(\r\n            BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n        );\r\n    },\r\n    getLogger: () => {\r\n        throw createBrowserConfigurationAuthError(\r\n            BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n        );\r\n    },\r\n    setLogger: () => {\r\n        return;\r\n    },\r\n    setActiveAccount: () => {\r\n        return;\r\n    },\r\n    getActiveAccount: () => {\r\n        return null;\r\n    },\r\n    initializeWrapperLibrary: () => {\r\n        return;\r\n    },\r\n    setNavigationClient: () => {\r\n        return;\r\n    },\r\n    getConfiguration: () => {\r\n        throw createBrowserConfigurationAuthError(\r\n            BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n        );\r\n    },\r\n    hydrateCache: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n    clearCache: () => {\r\n        return Promise.reject(\r\n            createBrowserConfigurationAuthError(\r\n                BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled\r\n            )\r\n        );\r\n    },\r\n};\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthError, AccountInfo } from \"@azure/msal-common\";\r\nimport { EventType } from \"./EventType\";\r\nimport { InteractionStatus, InteractionType } from \"../utils/BrowserConstants\";\r\nimport {\r\n    PopupRequest,\r\n    RedirectRequest,\r\n    SilentRequest,\r\n    SsoSilentRequest,\r\n    EndSessionRequest,\r\n    AuthenticationResult,\r\n} from \"..\";\r\n\r\nexport type EventMessage = {\r\n    eventType: EventType;\r\n    interactionType: InteractionType | null;\r\n    payload: EventPayload;\r\n    error: EventError;\r\n    timestamp: number;\r\n};\r\n\r\nexport type PopupEvent = {\r\n    popupWindow: Window;\r\n};\r\n\r\nexport type EventPayload =\r\n    | AccountInfo\r\n    | PopupRequest\r\n    | RedirectRequest\r\n    | SilentRequest\r\n    | SsoSilentRequest\r\n    | EndSessionRequest\r\n    | AuthenticationResult\r\n    | PopupEvent\r\n    | null;\r\n\r\nexport type EventError = AuthError | Error | null;\r\n\r\nexport type EventCallbackFunction = (message: EventMessage) => void;\r\n\r\nexport class EventMessageUtils {\r\n    /**\r\n     * Gets interaction status from event message\r\n     * @param message\r\n     * @param currentStatus\r\n     */\r\n    static getInteractionStatusFromEvent(\r\n        message: EventMessage,\r\n        currentStatus?: InteractionStatus\r\n    ): InteractionStatus | null {\r\n        switch (message.eventType) {\r\n            case EventType.LOGIN_START:\r\n                return InteractionStatus.Login;\r\n            case EventType.SSO_SILENT_START:\r\n                return InteractionStatus.SsoSilent;\r\n            case EventType.ACQUIRE_TOKEN_START:\r\n                if (\r\n                    message.interactionType === InteractionType.Redirect ||\r\n                    message.interactionType === InteractionType.Popup\r\n                ) {\r\n                    return InteractionStatus.AcquireToken;\r\n                }\r\n                break;\r\n            case EventType.HANDLE_REDIRECT_START:\r\n                return InteractionStatus.HandleRedirect;\r\n            case EventType.LOGOUT_START:\r\n                return InteractionStatus.Logout;\r\n            case EventType.SSO_SILENT_SUCCESS:\r\n            case EventType.SSO_SILENT_FAILURE:\r\n                if (\r\n                    currentStatus &&\r\n                    currentStatus !== InteractionStatus.SsoSilent\r\n                ) {\r\n                    // Prevent this event from clearing any status other than ssoSilent\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.LOGOUT_END:\r\n                if (\r\n                    currentStatus &&\r\n                    currentStatus !== InteractionStatus.Logout\r\n                ) {\r\n                    // Prevent this event from clearing any status other than logout\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.HANDLE_REDIRECT_END:\r\n                if (\r\n                    currentStatus &&\r\n                    currentStatus !== InteractionStatus.HandleRedirect\r\n                ) {\r\n                    // Prevent this event from clearing any status other than handleRedirect\r\n                    break;\r\n                }\r\n                return InteractionStatus.None;\r\n            case EventType.LOGIN_SUCCESS:\r\n            case EventType.LOGIN_FAILURE:\r\n            case EventType.ACQUIRE_TOKEN_SUCCESS:\r\n            case EventType.ACQUIRE_TOKEN_FAILURE:\r\n            case EventType.RESTORE_FROM_BFCACHE:\r\n                if (\r\n                    message.interactionType === InteractionType.Redirect ||\r\n                    message.interactionType === InteractionType.Popup\r\n                ) {\r\n                    if (\r\n                        currentStatus &&\r\n                        currentStatus !== InteractionStatus.Login &&\r\n                        currentStatus !== InteractionStatus.AcquireToken\r\n                    ) {\r\n                        // Prevent this event from clearing any status other than login or acquireToken\r\n                        break;\r\n                    }\r\n                    return InteractionStatus.None;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CryptoOps } from \"./CryptoOps\";\r\nimport {\r\n    Logger,\r\n    LoggerOptions,\r\n    PopTokenGenerator,\r\n    SignedHttpRequestParameters,\r\n} from \"@azure/msal-common\";\r\nimport { version, name } from \"../packageMetadata\";\r\n\r\nexport type SignedHttpRequestOptions = {\r\n    loggerOptions: LoggerOptions;\r\n};\r\n\r\nexport class SignedHttpRequest {\r\n    private popTokenGenerator: PopTokenGenerator;\r\n    private cryptoOps: CryptoOps;\r\n    private shrParameters: SignedHttpRequestParameters;\r\n    private logger: Logger;\r\n\r\n    constructor(\r\n        shrParameters: SignedHttpRequestParameters,\r\n        shrOptions?: SignedHttpRequestOptions\r\n    ) {\r\n        const loggerOptions = (shrOptions && shrOptions.loggerOptions) || {};\r\n        this.logger = new Logger(loggerOptions, name, version);\r\n        this.cryptoOps = new CryptoOps(this.logger);\r\n        this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\r\n        this.shrParameters = shrParameters;\r\n    }\r\n\r\n    /**\r\n     * Generates and caches a keypair for the given request options.\r\n     * @returns Public key digest, which should be sent to the token issuer.\r\n     */\r\n    async generatePublicKeyThumbprint(): Promise<string> {\r\n        const { kid } = await this.popTokenGenerator.generateKid(\r\n            this.shrParameters\r\n        );\r\n\r\n        return kid;\r\n    }\r\n\r\n    /**\r\n     * Generates a signed http request for the given payload with the given key.\r\n     * @param payload Payload to sign (e.g. access token)\r\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n     * @param claims Additional claims to include/override in the signed JWT\r\n     * @returns Pop token signed with the corresponding private key\r\n     */\r\n    async signRequest(\r\n        payload: string,\r\n        publicKeyThumbprint: string,\r\n        claims?: object\r\n    ): Promise<string> {\r\n        return this.popTokenGenerator.signPayload(\r\n            payload,\r\n            publicKeyThumbprint,\r\n            this.shrParameters,\r\n            claims\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Removes cached keys from browser for given public key thumbprint\r\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n     * @returns If keys are properly deleted\r\n     */\r\n    async removeKeys(publicKeyThumbprint: string): Promise<boolean> {\r\n        return this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\r\n    }\r\n}\r\n", "/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    Constants,\r\n    InProgressPerformanceEvent,\r\n    IPerformanceClient,\r\n    Logger,\r\n    PerformanceClient,\r\n    PerformanceEvent,\r\n    PerformanceEvents,\r\n    PreQueueEvent,\r\n    SubMeasurement,\r\n} from \"@azure/msal-common\";\r\nimport { Configuration } from \"../config/Configuration\";\r\nimport { name, version } from \"../packageMetadata\";\r\nimport {\r\n    BROWSER_PERF_ENABLED_KEY,\r\n    BrowserCacheLocation,\r\n} from \"../utils/BrowserConstants\";\r\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto\";\r\n\r\n/**\r\n * Returns browser performance measurement module if session flag is enabled. Returns undefined otherwise.\r\n */\r\nfunction getPerfMeasurementModule() {\r\n    let sessionStorage: Storage | undefined;\r\n    try {\r\n        sessionStorage = window[BrowserCacheLocation.SessionStorage];\r\n        const perfEnabled = sessionStorage?.getItem(BROWSER_PERF_ENABLED_KEY);\r\n        if (Number(perfEnabled) === 1) {\r\n            return import(\"./BrowserPerformanceMeasurement\");\r\n        }\r\n        // Mute errors if it's a non-browser environment or cookies are blocked.\r\n    } catch (e) {}\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Returns boolean, indicating whether browser supports window.performance.now() function.\r\n */\r\nfunction supportsBrowserPerformanceNow(): boolean {\r\n    return (\r\n        typeof window !== \"undefined\" &&\r\n        typeof window.performance !== \"undefined\" &&\r\n        typeof window.performance.now === \"function\"\r\n    );\r\n}\r\n\r\n/**\r\n * Returns event duration in milliseconds using window performance API if available. Returns undefined otherwise.\r\n * @param startTime {DOMHighResTimeStamp | undefined}\r\n * @returns {number | undefined}\r\n */\r\nfunction getPerfDurationMs(\r\n    startTime: DOMHighResTimeStamp | undefined\r\n): number | undefined {\r\n    if (!startTime || !supportsBrowserPerformanceNow()) {\r\n        return undefined;\r\n    }\r\n\r\n    return Math.round(window.performance.now() - startTime);\r\n}\r\n\r\nexport class BrowserPerformanceClient\r\n    extends PerformanceClient\r\n    implements IPerformanceClient\r\n{\r\n    constructor(\r\n        configuration: Configuration,\r\n        intFields?: Set<string>,\r\n        abbreviations?: Map<string, string>\r\n    ) {\r\n        super(\r\n            configuration.auth.clientId,\r\n            configuration.auth.authority || `${Constants.DEFAULT_AUTHORITY}`,\r\n            new Logger(\r\n                configuration.system?.loggerOptions || {},\r\n                name,\r\n                version\r\n            ),\r\n            name,\r\n            version,\r\n            configuration.telemetry?.application || {\r\n                appName: \"\",\r\n                appVersion: \"\",\r\n            },\r\n            intFields,\r\n            abbreviations\r\n        );\r\n    }\r\n\r\n    generateId(): string {\r\n        return BrowserCrypto.createNewGuid();\r\n    }\r\n\r\n    private getPageVisibility(): string | null {\r\n        return document.visibilityState?.toString() || null;\r\n    }\r\n\r\n    private deleteIncompleteSubMeasurements(\r\n        inProgressEvent: InProgressPerformanceEvent\r\n    ): void {\r\n        void getPerfMeasurementModule()?.then((module) => {\r\n            const rootEvent = this.eventsByCorrelationId.get(\r\n                inProgressEvent.event.correlationId\r\n            );\r\n            const isRootEvent =\r\n                rootEvent &&\r\n                rootEvent.eventId === inProgressEvent.event.eventId;\r\n            const incompleteMeasurements: SubMeasurement[] = [];\r\n            if (isRootEvent && rootEvent?.incompleteSubMeasurements) {\r\n                rootEvent.incompleteSubMeasurements.forEach(\r\n                    (subMeasurement: SubMeasurement) => {\r\n                        incompleteMeasurements.push({ ...subMeasurement });\r\n                    }\r\n                );\r\n            }\r\n            // Clean up remaining marks for incomplete sub-measurements\r\n            module.BrowserPerformanceMeasurement.flushMeasurements(\r\n                inProgressEvent.event.correlationId,\r\n                incompleteMeasurements\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n     * Also captures browser page visibilityState.\r\n     *\r\n     * @param {PerformanceEvents} measureName\r\n     * @param {?string} [correlationId]\r\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n     */\r\n    startMeasurement(\r\n        measureName: string,\r\n        correlationId?: string\r\n    ): InProgressPerformanceEvent {\r\n        // Capture page visibilityState and then invoke start/end measurement\r\n        const startPageVisibility = this.getPageVisibility();\r\n        const inProgressEvent = super.startMeasurement(\r\n            measureName,\r\n            correlationId\r\n        );\r\n        const startTime: number | undefined = supportsBrowserPerformanceNow()\r\n            ? window.performance.now()\r\n            : undefined;\r\n\r\n        const browserMeasurement = getPerfMeasurementModule()?.then(\r\n            (module) => {\r\n                return new module.BrowserPerformanceMeasurement(\r\n                    measureName,\r\n                    inProgressEvent.event.correlationId\r\n                );\r\n            }\r\n        );\r\n        void browserMeasurement?.then((measurement) =>\r\n            measurement.startMeasurement()\r\n        );\r\n\r\n        return {\r\n            ...inProgressEvent,\r\n            end: (\r\n                event?: Partial<PerformanceEvent>,\r\n                error?: unknown\r\n            ): PerformanceEvent | null => {\r\n                const res = inProgressEvent.end(\r\n                    {\r\n                        ...event,\r\n                        startPageVisibility,\r\n                        endPageVisibility: this.getPageVisibility(),\r\n                        durationMs: getPerfDurationMs(startTime),\r\n                    },\r\n                    error\r\n                );\r\n                void browserMeasurement?.then((measurement) =>\r\n                    measurement.endMeasurement()\r\n                );\r\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n\r\n                return res;\r\n            },\r\n            discard: () => {\r\n                inProgressEvent.discard();\r\n                void browserMeasurement?.then((measurement) =>\r\n                    measurement.flushMeasurement()\r\n                );\r\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @returns\r\n     */\r\n    setPreQueueTime(\r\n        eventName: PerformanceEvents,\r\n        correlationId?: string\r\n    ): void {\r\n        if (!supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(\r\n                `BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${eventName}`\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (!correlationId) {\r\n            this.logger.trace(\r\n                `BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to set telemetry queue time`\r\n            );\r\n            return;\r\n        }\r\n\r\n        const preQueueEvent: PreQueueEvent | undefined =\r\n            this.preQueueTimeByCorrelationId.get(correlationId);\r\n        /**\r\n         * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n         * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n         */\r\n        if (preQueueEvent) {\r\n            this.logger.trace(\r\n                `BrowserPerformanceClient: Incomplete pre-queue ${preQueueEvent.name} found`,\r\n                correlationId\r\n            );\r\n            this.addQueueMeasurement(\r\n                preQueueEvent.name,\r\n                correlationId,\r\n                undefined,\r\n                true\r\n            );\r\n        }\r\n        this.preQueueTimeByCorrelationId.set(correlationId, {\r\n            name: eventName,\r\n            time: window.performance.now(),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculates and adds queue time measurement for given performance event.\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @param {?number} queueTime\r\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n     * @returns\r\n     */\r\n    addQueueMeasurement(\r\n        eventName: string,\r\n        correlationId?: string,\r\n        queueTime?: number,\r\n        manuallyCompleted?: boolean\r\n    ): void {\r\n        if (!supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(\r\n                `BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${eventName}`\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (!correlationId) {\r\n            this.logger.trace(\r\n                `BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to add queue measurement`\r\n            );\r\n            return;\r\n        }\r\n\r\n        const preQueueTime = super.getPreQueueTime(eventName, correlationId);\r\n        if (!preQueueTime) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = window.performance.now();\r\n        const resQueueTime =\r\n            queueTime || super.calculateQueuedTime(preQueueTime, currentTime);\r\n\r\n        return super.addQueueMeasurement(\r\n            eventName,\r\n            correlationId,\r\n            resQueueTime,\r\n            manuallyCompleted\r\n        );\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["BrowserCrypto.createNewGuid", "ControllerFactory.createV3Controller", "version", "version", "ControllerFactory.createController", "version", "BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled", "BrowserCrypto.createNewGuid"]
}
